const contents = [
    {
        content: "C:\\Users\\Administrator\\Downloads\\Data Engineering Platforms\\Assignment 7\\customers.json",
        collection: "customers",
        idPolicy: "overwrite_with_same_id", //overwrite_with_same_id|always_insert_with_new_id|insert_with_new_id_if_id_exists|skip_documents_with_existing_id|abort_if_id_already_exists|drop_collection_first|log_errors
        //Use the transformer to customize the import result
        //transformer: (doc)=>{ //async (doc)=>{
        //   doc["importDate"]= new Date()
        //   return doc; //return null skips this doc
        //}
    },
    {
        content: "C:\\Users\\Administrator\\Downloads\\Data Engineering Platforms\\Assignment 7\\films.json",
        collection: "films",
        idPolicy: "overwrite_with_same_id",
    },
    {
        content: "C:\\Users\\Administrator\\Downloads\\Data Engineering Platforms\\Assignment 7\\stores.json",
        collection: "stores",
        idPolicy: "overwrite_with_same_id",
    }
];

mb.importContent({
    connection: "localhost",
    database: "test",
    fromType: "file",
    batchSize: 2000,
    contents
})


use test;

db.customers.find({"District": "California"}).count();

db.films.find({"Rating": "NC-17"}, {"Title": 1, "Rating": 1, "_id": 0}).sort({"Title": 1});

db.stores.find({});

{$or: [ { "Length": { $gt: [{ $toDecimal: "$Length" }, 25] } }, { "Special Features": { $regex: /Commentaries/i } } ]}


{$match : { "Rentals": {"Payments": {$elemMatch: {$and: [{$lt: ["$Rentals.Payments.Amount", 20]}, {$gt: ["$Rentals.Payments.Amount", 10]}]}}}}},
    {$unwind: {"$Rentals.Payments": 1}}


db.customers.aggregate({$unwind: "$Rentals"},{
  '$addFields': {
    filteredDates: {
      '$filter': {
        input: '$Rentals.Payments.Payment Date',
        as: 'date',
        cond: {
          '$gte': [
            { '$toDate': '$$date' },
            ISODate("2005-06-25T00:00:00.000Z")
          ]
        }
      }
    }
  }
})





db.customers.aggregate([{$unwind: "$Rentals"}, {$match: {$expr: {
            $and: [
                { $gte: [{ $toDate: "$Rentals.Payments.Payment Date" }, new Date("2005-01-01 00:00:00")] },
                { $lte: [{ $toDate: "$Rentals.Payments.Payment Date" }, new Date("2005-03-01 00:00:00")] }
            ]
        }}}])

db.customers.aggregate([
    {$unwind: "$Rentals"},
    {$project: { "Rentals": {
        $filter: {
          input: "$Rentals.Payments.Payment Date",
          as: "date",
          cond: { 
              $and: [{'$gt': [ { '$toDate': '$$date' }, ISODate("2005-08-01T00:00:00.000Z")]}, 
                     {'$lt': [ { '$toDate': '$$date' }, ISODate("2005-09-01T00:00:00.000Z")]}]
              }
        }
    }}}
    ])

db.customers.aggregate([{$unwind: "$Rentals"}, {$project: {"Rentals.Payments.Amount": 1, "Rentals.Payments.Payment Date": 1, "_id": 0}}])

db.customers.aggregate([{$unwind: "$Rentals"}, {$project: {check_1: {$gt: [{$toDecimal: "$Rentals.Payments.Amount"}, 10]}, "Rentals.Payments.Payment Date": 1, "_id": 0}}])

db.customers.aggregate([
    {$project:{ "Payment Date":{$dateFromString:{dateString:'$Rentals.Payments.Payment Date'}}}}
])



db.customers.aggregate([{$unwind: "$Rentals"},
    {
        $addFields: {
            goals: {
                $filter: {
                    input: "$Rentals.Payments",
                    as: "g",
                    cond: { 
              $and: [{'$gt': [ { '$toDate': '$$g.Payment Date' }, ISODate("2005-08-01T00:00:00.000Z")]}, 
                     {'$lt': [ { '$toDate': '$$g.Payment Date' }, ISODate("2005-09-01T00:00:00.000Z")]}]
              }
                }
            }
        }
    },
    {
        $group: {
            _id: "",
            "total": { $sum: { $sum: "$goals.Amount" } }
        }
    },
    {$project: {_id: 0, "Total Revenue for August 2005": "$total"}}
])
