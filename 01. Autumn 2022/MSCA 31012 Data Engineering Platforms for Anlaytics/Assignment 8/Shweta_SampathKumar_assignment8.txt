/***********************************************
**                MSc ANALYTICS 
**     DATA ENGINEERING PLATFORMS (MSCA 31012)
** File:   Assignment 8
** Auth:   Shweta Sampath Kumar
** Date:   12/04/2022
************************************************/


//1. Find all producers that produced the movie When Harry Met Sally. 
//Using MATCH() the rlationship between person and movie nodes was set AS PRODUCED and the names of producers is returned.
MATCH (p:Person)-[:PRODUCED]->(m:Movie {title: "When Harry Met Sally"})
RETURN p.name AS Producers;

//2. Find directors who have directed more than 2 movies.  Return the name of the director and the count of movies they directed, ordered by movie count in descending order.
//Using MATCH() the rlationship between person and movie nodes was set as DIRECTED, using WITH and collect, the data is grouped by movie titles and their count is calculated
//using size(). The condition is set to return those movies greater than 2 and the names of the directors and their count of movies directed is returned.
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, size(collect(m.title)) AS m
WHERE m > 2
RETURN p.name AS Directors, m AS `Count of Movies Directed`;

//3. Find the actors who acted in 5+ movies and the movies in which they acted.  Return the name of the actor, and the title of the films, ordered by the number of films acted per actor in descending order.
//Using MATCH() the rlationship between person and movie nodes was set as ACTED_IN, using WITH and collect, the data is grouped by movie titles. 
//The condition is set to return those where the list of movies greater than equal to 5 and the names of the actors and their movies is returned.
//The results are ordered by count of movies in descending order by using ORDER BY. 
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, collect(m.title) AS m
WHERE size(m)>=5
RETURN p.name AS Actor, m AS Movies
ORDER BY size(Movies) DESC;

//4. Find the people who were the producer, writer, AND director (the same person who held all 3 roles) at the same time on a film. Return the names of the people and the titles of the films.
//Similar to a graph, in Match set the relationships between people and person nodes as PRODUCED, WROTE and DIRECTED. Returned the names of such people and their movies.
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:WROTE]->(p:Person)<-[:DIRECTED]->(m:Movie)
RETURN p.name AS `Producer, Writer, Director`, m.title AS Movie;

//5. Find all the actors that are exactly 3 degrees away from Tom Hanks.  NOTE: In this case, we want to define a "degree" as a common connection between two people.  So, if Tom Hanks is connected to Gary Sinise by way of them both acting in Apollo 13, then that connection has a path length of 2, and we would consider Gary Sinise to be 1 degree away from Tom Hanks since they both acted in the same movie.
//Using MATCH between person nodes and one node looking specifically for Tom Hanks, in the relationship part, set the condition as *6 where * represents any relationship and 6 is the number of hops to achieve 3 degrees away from Tom Hanks.
//Return the actor's names.
MATCH (p:Person {name:"Tom Hanks"})-[*6]-(a:Person)
RETURN DISTINCT a.name AS Actor;

//6. Update database to reflect new name ("Larry Wachowski") for director "Lana Wachowski".
//Using Match, searched for person nodes with name as "Lana Wachowski". Using SET, the nodes attribute - name - is updated to "Larry Wachowski". Returned the nodes to reflect the same.
MATCH (p:Person {name: 'Lana Wachowski'})
SET p.name = 'Larry Wachowski'
RETURN p;

//7. Create a section of fun movies whose summary contains the keyword "fun".
//MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
//WHERE r.summary CONTAINS 'fun'
//CREATE (Fun)-[:IS_FUN]->(m)
//RETURN p, m, r;
//Based on TA session, changed it to just return movies with keyword 'fun' in summary using CONTAINS function in the WHERE clause
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'fun' OR r.summary CONTAINS 'Fun'
RETURN m.title, r.summary

//8. List all the release years and count all movies released in that year.
//Using Match for movie nodes, the movies are grouped by movie titles and their count is calculated for the released year in the WITH clause. RETURN the year and the count of movies in that year.
MATCH (m:Movie)
WITH m.released AS `Released Year`, size(collect(m.title)) AS `Count of Movies`
RETURN `Released Year`, `Count of Movies`;

//9. List all the movies whose rating >= 90.
//Using MATCH, the relationship between people and Movie nodes is set as reviewed to filter by rating attribute of the reviewed relationship which are greater than or equal to 90 in the WHERE clause.
//returned the movie title and their corresponding rating.
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating >= 90
RETURN m.title AS Movie, r.rating AS Rating;

//10. List the top producers who are most likely to entertain new movies production hint: Producers with most movies produced.
//Using Match for setting relationship between people and movie nodes AS PRODUCED, the movies are grouped by movie titles and their count is calculated for the producer in the WITH clause. 
//RETURN the producer name, ordered the results by count of movies produced in descending order and limited the results by 1 to show which producer has the most movies produced as requested.
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p, size(collect(m.title)) AS c
RETURN p.name AS Producer
ORDER BY c DESC
LIMIT 1;

//11. List all the movies along with a number of reviews received. order the results by a number of reviews in descending order.
//Using Match for setting relationship between people and movie nodes AS REVIEWED, the movies are grouped by their ratings and their count is calculated by size().
//The movie title and count of ratings are returned in descending order using ORDER BY & DESC clause on the count of ratings
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH size(collect(r.rating)) AS review, m
RETURN m.title AS Movie, review AS `Number of reviews Received`
ORDER BY `Number of reviews Received` DESC;

//12. Find the shortest path between movies "The Matrix" and "The Matrix Reloaded".
//Using MATCH and shortestPath function, the relationship was set as any using * between movies "The Matrix" and "The Matrix Reloaded". Theshortest path is returned.
MATCH s=shortestPath((m:Movie {title:"The Matrix"})-[*]-(m1:Movie {title:"The Matrix Reloaded"}))
RETURN s;

//13. List all the writers and the list of movies they have written.
//Using Match for setting relationship between people and movie nodes as WROTE, the movies are grouped by movie titles and the person name and list of movies is returned.
MATCH (p:Person)-[:WROTE]->(m:Movie)
WITH p, collect(m.title) AS m
RETURN p.name AS Writer, m AS Movies;

//14. List top 15 actors who have co-acted with each other the most. Ignore The Matrix trilogy for this analysis.
//Using MATCH, the relationship between person, movie nodes is set as ACTED_IN, the condition in the WHERE clause is set to not look for the Matrix trilogy. The actors are grouped by distinct actor names to avoid duplicates and their count is calculated using size()
//The actor names are returned ordered in descending order based on count of co-actors.
//The results are limited to 15 rows using LIMIT.
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(coActors:Person)
WHERE NOT m.title IN ['The Matrix', 'The Matrix Reloaded', 'The Matrix Revolutions']
WITH p, size(collect(DISTINCT coActors.name)) AS coActors
RETURN p.name AS Actor
ORDER BY coActors DESC
LIMIT 15;