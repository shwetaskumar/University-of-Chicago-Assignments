In this assignment, we will be converting the Sakila relational database schema to a snowflake schema that would be used in a data warehouse environment.

This process can be broken out into 4 parts, and some helpful hints are included to aid in your process:


A: Prepare the sakila_snowflake schema and dimension tables

Download the base DDL and DML scripts for sakila_snowflake:
DDL: SakilaSnowflakeDW-DDL.sqlDownload SakilaSnowflakeDW-DDL.sql
DML: SakilaSnowflakeDW-DML.sqlDownload SakilaSnowflakeDW-DML.sql

Download the combined DDL and DML for a sample data warehouse schema for classicmodels if you haven't already:
classicmodelsdw.sqlDownload classicmodelsdw.sql
You can use this for inspiration to help with sakila_snowflake.

Drop and re-load the sakila schema using the files from Assignment 3 to make sure that you have all the records in Sakila (in case you accidentally dropped some in the previous assignments/exercises)

Open the SakilaSnowflakeDW-DDL script in Workbench and run the commands up until the lines where you are instructed to write the DDL for fact_rental (should be up to line 280).
Note: If you try to run the whole file from top to bottom, you will get an error on the final CREATE INDEX lines for sakila_snowflake.fact_rental.  Only run the lines prior to the section about fact_rental.
Make note of any warnings you see when this script runs.  Remember, warnings are not errors, but you should notice them so you can consider how to fix/improve them.

Open the SakilaSnowflakeDW-DML script in Workbench and run all the commands.  You should notice that the final comments at the end of the file are where you will write your DML soon.
Make note of any warnings you see when this script runs. 

Refresh your schemas in Workbench so you see a new schema called sakila_snowflake

Reverse engineer the EER diagram for sakila_snowflake so you can see what the schema design looks like so far.  You should see many dimension tables, but no central table connecting them. 
 
B: Write the DDL to create the empty sakila_snowflake.fact_rental table

In the DDL script, in the section where it is commented for sakila_snowflake.fact_rental, write the CREATE TABLE script to populate the center fact table for your new star schema.
Make sure that your fact_rental table includes the following columns and datatypes:
rental_id INT(10) (Primary Key)
rental_last_update TIMESTAMP
customer_key INT(8)
staff_key INT(8)
film_key INT(8)
store_key INT(8)
rental_date_key BIGINT(20)
return_date_key BIGINT(20)
count_rentals INT(8)
count_returns INT(8)
rental_duration INT(10)
dollar_amount FLOAT
Also include:
Appropriate NULL/NOT NULL restrictions and/or default values on your columns, as applicable. 
Think carefully about this: there is only be one column that should be allowed to have NULL values.
Foreign key / primary key constraints with the dimensional tables in the sakila_snowflake schema.
Take a look at the CREATE statement for classicmodelsdw.factOrderDetails if you need inspiration

Run the CREATE TABLE script for fact_rental when you're ready.

Run the CREATE INDEX statements that follow in the script.

Refresh the schema and rerun EER diagram to see your new (empty) fact_rental table.

C: Write the DML to insert facts into sakila_snowflake.fact_rental

In the DML script, at the bottom, write your INSERT statement and query to populate the sakila_snowflake.fact_rental table. 
Using sakila.rental as your starting point, join on the necessary dimension tables in sakila_snowflake and sakila to return the columns needed.
rental_id: rental_id value from sakila.rental
rental_last_update: last_update value from sakila.rental
customer_key: foreign key from the appropriate sakila_snowflake dimensional table
staff_key: foreign key from the appropriate sakila_snowflake dimensional table
film_key: foreign key from the appropriate sakila_snowflake dimensional table
store_key: foreign key from the appropriate sakila_snowflake dimensional table
rental_date_key: foreign key from the appropriate sakila_snowflake dimensional table
return_date_key: foreign key from the appropriate sakila_snowflake dimensional table
count_rentals: count of rentals for that rental_id (HINT: you need to perform very basic logic/calculation here.  If each rental_id is only for one rental, what is the min and max that count_rentals can be for a record?)
count_returns: count of returns for that rental_id (HINT: you need to perform very basic logic/calculation here.  If each rental_id is only for one rental, what is the min and max that count_returns can be for a record?)
rental_duration: rental_duration for the film (HINT: do not need to perform a calculation)
dollar_amount: payment amount (HINT: do not need to perform a calculation)
Keep the following in mind:
You may need to calculate some columns based on data that is available to you, but many of the values are already available in the sakila tables
You may need to use a combination of different types of joins
You may need to join on the same table twice, using two different table aliases
Columns ending in _key vs _id are different:
columns in sakila_snowflake.fact_rental that end in _key are NOT the same as columns in sakila with similar names that end in _id. (i.e. movie_id and movie_key are different).
In many of the sakila_snowflake lookup tables, you will see that the primary key ends in _key, but there is also another attribute that ends in _id.  These _id columns match the _id columns in sakila.  Use the _id columns as join keys when you need to join to the original sakila tables, but make sure that your _key columns are the ones ending up as foreign keys your fact table.
Take a look at the following for additional inspiration:
Understanding the DML for classicmodelsdw.factOrderDetails
Example: Joining Between Schemas & Translating Keys 

Make sure that the SELECT statement that is contained within your INSERT statement runs correctly and looks ok by itself before you try to actually INSERT the data into sakila_snowflake.fact_rental. 
If you encounter errors when you run your SELECT statement, try troubleshooting your joins by breaking the query into smaller chunks and confirming that each join works as expected, and then put it all back together again.
Make sure your query for sakila_snowflake.fact_rental returns the same number of rows as in sakila.rental (there should be one row for every rental)

Run the INSERT statement for fact_rental when you are ready.  This  may take a while.
If you get a timeout error (Error Code: 2013), try the following steps:
In the application menu, select Edit > Preferences > SQL Editor.
Look for the MySQL Session section and increase the DBMS connection read time out value.
Save the settings, quit MySQL Workbench and reopen the connection

Once your INSERT finishes, query the sakila_snowflake.fact_rental table and check again to make sure everything looks OK.  If you need to make changes, drop the table, re-run the CREATE TABLE statement from earlier, and try again.
D: Check for areas of improvement

The DDL and DML provided for the sakila_snowflake schema isn't perfect.  Summarize any script errors or warnings, and areas of improvement in the data model.  At minimum, answer the following:

Are there any warnings that should be resolved? Describe them and recommend fixes.
Are there any orphaned tables that could be safely removed from the data model?  Name them and explain why they can be safely dropped.
Are there any changes to column names that would help make the data model more intuitive? Describe them and recommend changes.
Are there any metrics that you think should be added to sakila_snowflake.fact_rental? Describe them but do not implement.
Describe any other areas of improvement you see.
 

SUBMISSION GUIDELINES (3 files):

A PDF named in the format firstname_lastname_fact_rental.pdf with:
Screenshot of the final sakila_snowflake EER diagram containing fact_rental.
Summary of the areas of improvement described in (D) above.
The full DDL script, including your addition for fact_rental, named in the following format: firstname_lastname_SakilaSnowflakeDW-DDL.sql
The full DML script, including your addition for fact_rental, named in the following format: firstname_lastname_SakilaSnowflakeDW-DML.sql